import com.modrinth.minotaur.dependencies.ModDependency
import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

def ENV = System.getenv()
def CHANGELOG = new File('CHANGELOG.md').exists() ? new File('CHANGELOG.md').text : ""

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

tasks.register('remapMavenJar', RemapJarTask) {
    dependsOn jar
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}

modrinth {
    String projectVersion = project.version.toString()
    if (projectVersion.contains("dev")) {
        System.err.println("Can not publish a dev version to Modrinth!")
        return
    }

    List<String> projectVersionNumber = projectVersion.split("-", 2)
    String projectVersionName = "Release ${projectVersionNumber[0]}"
    if (projectVersionNumber.size() == 2) {
        List<String> typeNumber = projectVersionNumber[1].split("\\.", 2)
        if (projectVersionNumber[1].startsWith("rc")) {
            projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${typeNumber[1]}"
            versionType = "beta" //Modrinth doesn't have RC so I use beta
        } else if (projectVersionNumber[1].startsWith("beta")) {
            projectVersionName = "${projectVersionNumber[0]} - Beta ${typeNumber[1]}"
            versionType = "beta"
        } else if (projectVersionNumber[1].startsWith("alpha")) {
            projectVersionName = "${projectVersionNumber[0]} - Alpha ${typeNumber[1]}"
            versionType = "alpha"
        }
    }

    token = ENV.MODRINTH_TOKEN
    projectId = "JePs1Lb3"
    versionName = projectVersionName
    changelog = CHANGELOG
    uploadFile = remapJar
    dependencies = [
            new ModDependency("fabric-api", "required")
    ]
}

tasks.register('checkVersion') {
    dependsOn remapMavenJar
    group = 'verification'
    doFirst {
        try {
            def text = new URL("https://api.modrinth.com/v2/project/${project.archives_base_name}/version/${version}").text
            throw new RuntimeException("${version} has already been released!")
        } catch (FileNotFoundException ignored) {}
    }
}

tasks.build.dependsOn(tasks.remapMavenJar)
tasks.modrinth.dependsOn(tasks.checkVersion)
